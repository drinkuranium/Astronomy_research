---------------------------------2020. 01. 28----------------------------------

인턴 시작, 김웅태 교수님 및 서우영 박사님과 면담

---------------------------------2020. 01. 29----------------------------------

Gizmo 실행 시도

---------------------------------2020. 01. 30----------------------------------

Gizmo 실행 성공

Gizmo test problem 3번 실시
1. Kelvin-Helmholtz instability simulation
2. Galactic disk with no ISM physics
3. Galactic disk with ISM cooling (only to 10000K)
 - Config.sh에서 Cooling을 키는 경우 TREECOOL 위치를 GIZMO binary가 있는 
   위치로 바꿔주어야 함
 - Cooling physics의 영향 때문인지 timestep이 매우 작음
  -> 시뮬레이션을 끝까지 돌리는 것은 불가능

Gizmo User's Guide 공부 
 - section 9: Snapshot & Initical Condition Files 완독
 - section 10: Log Outputs & Diagnostic Files 완
 - section 7: Config.sh (Setting compile-time options) ~ Hydro Solver Method 까지

---------------------------------2020. 01. 31----------------------------------

GalIC 실행 시도
- 구조와 대부분의 dependency는 Gizmo와 비슷
- Gizmo와 마찬가지로 Makefile에 dependent library의 경로를 지정해주어야 함
- Gizmo와 마찬가지로 Config.sh로 complie time, parameterfile로 runtime 조절
- Gizmo와는 다르게 GMP library 필요 (Makefile에서 확인 가능)
 -> GMU library를 깔기 위해 M4 library 설치
 -> 설치 도중 autoconf, automake library도 같이 설치
- Makefile에서 GMU library의 위치를 따로 잡아주지 않았는데 알아서 인식 - ??

autoconf, automake는 make check, make installcheck에서 오류 발생
-> 몇 천개의 테스트 중 10개 정도의 오류만 났으나, 어떤 영향이 있을지는 미지수
-- 실패한 테스트 메모 --
 autoconf - make check: 2/488 Failed
  501: Libtool (Compatibility with other tools)
  503: autoscan (Autoscan)
 autoconf - make installcheck : All succeeded
 automake - make check: 9/2897 Failed (XFAIL: 38, SKIP: 140)
  t/nobase-python.sh
  t/py-compile-basic.sh
  t/py-compile-basedir.sh
  t/py-compile-destdir.sh
  t/py-compile-option-terminate.sh
  t/python3.sh
  t/python10.sh
  t/python12.sh
  t/subobj.sh
 automake - make checkinstall: 3/2697 Failed (XFAIL: 38, SKIP: 216)
  t/aclocal-print-acdir.sh
  t/location.sh
  t/print-libdir.sh

GalIC 실행 성공 
 - Test with Particle number of Bulge, Halo = 10000, respectively (Model_B1.param)
 - Test with Particle number of Bulge, Halo = 100000, respectively (Model_B1.param)
 - Test with Particle number of Bulge, Disk = 20000, respectively (Model_D1.param)
  -> Failed, running out of memory. It seems like D1 model needs much more memory
  -> Succeeded by reducing sampling particles for density and force fields by factor 10
     (Particle number in target model is not the main cause of exhaustion of memory)
	 (But reducing particle number greatly reduces running time)
	 (Also note that MaxMemSize in parameterfile means maximum RAM allocated 'per core')

Gizmo User's Guide 공부 
 - section 7: Config.sh (Setting compile-time options) 
              Additional Fluid Physics 부터 ~ On-the-Fly Group (Halo, Galaxy, Cluster, etc) Finding 까지
	
------------------------2020. 02. 01 ~ 2020. 02. 02 주말-----------------------

Gizmo User's Guide 공부 
 - section 7: Config.sh (Setting compile-time options) 
              On-the-Fly Group (Halo, Galaxy, Cluster, etc) Finding 살짝 

---------------------------------2020. 02. 03----------------------------------

GalIC GNU optimization option 노트북에 최적화 (by using B1 model)
 - -O3보다 -O2가 오히려 빠르고, -funroll-loops는 큰 차이가 없는 것을 확인
 - Particle number를 늘리면 -funroll-loops는 실행 속도를 더 느리게 만들 것으로 추측
  -> -O2 option만 주는 것이 가장 빠름

GalIC -np로 할당하는 코어 수에 따른 속도 측정 (by using D2 model)
 - 코어 늘어날수록 실행속도도 빨라짐
 - 다만 그 정도는 생각보다 훨씬 작음
  (4->8->12로 4개씩 늘어날 때마다 약 15% 정도 빨라짐)
 - 8->12의 차이와 4->8의 차이가 비슷함 -> Hyper-threading의 영향은 아닌 듯

Gizmo의 결과로 나오는 HDF5 데이터 읽는 코드 해석
(readsnap.py & load_from_snapshot)
 - 전체 구조는 학습했으나, 물리적인 이유는 앞으로 공부가 계속 필요함

GalIC test model의 결과를 load_from_snapshot을 통해 plot
 - 현재는 particle location만 plot했음
 - Velocity ellpisoid plot 등 데이터를 가공하기 위해서는 더 많은 작업이 필요할 듯

---------------------------------2020. 02. 04----------------------------------

GalIC 결과를 이용해 Density contour plot하는 코드 작성

혹시 모를 랩미팅 발표에 대비해 PPT 작성
 - 물론 발표하지는 않음

랩미팅 참가
 - 직접 발표하는 것을 보지는 않고 선배들이 하는 것을 지켜봄
 - 발표자가 한 홛동에 따라서 다룬 내용의 양이 크게 바뀜
 - 실제로 다른 연구자가 쓴 논문을 근거로 발표하므로, 향후 많은 논문 공부는 필수일 듯

데스크탑 GIZMO 초기 세팅 완료
 - Test problem으로 Kelvin-Helmholtz 실행 완료
 - HDF5-1.10.6으로도 GIZMO 실행 가능
  -> -lz 옵션을 지우고 libhdf5.so.103 파일만 /usr/lib로 옮기면 실행됨
  -> libhdf5.so.103 파일만 옮겨야 하는 것은 GIZMO 내부의 오류일 가능성이 큼
  -> 나중에 직접 코드를 뜯어보면서 살펴봐야 할 듯

노트북 GalIC 코드 실행에 따른 발열관리 최적화 
 - Turbo boast를 끄는 것은 최대 클럭이 2600MHz가 되어 성능이 너무 떨어짐
 - 최대 CPU 클럭을 3200MHz로 세팅
 - 다만 코드를 30분 이상 돌리는 경우 다시 발열 관리가 안됨

Swapfile을 주는 것이 문제였는지, CPU 클럭 제한을 잘못했는지 우분투 부팅이 안됨...

---------------------------------2020. 02. 05----------------------------------

노트북 우분투 OS 포맷 후 재설치, 환경 다시 세팅
 - HDF5-1.8에서 HDF5-1.10으로 업그레이드하고 설치 경로 정리
 - 이전 데이터는 윈도우에 백업 후 재설치 이후 다시 불러와서 chmod로 권한까지 정리
 - 최대 CPU 클럭 3200MHz 재부팅 시에도 적용되도록 설정

데스크탑과 노트북 성능 비교
 - 초기 계산은 노트북이 코어가 많아서 빠름 (적용한 코어 수 4 vs 8)
 - 그런데 iteration은 데스크탑이 클럭이 3900MHz 높아서 그런지 데스크탑이 더 빠름
 - 노트북 성능 향상을 위해서는 쿨러가 필수일 듯

---------------------------------2020. 02. 06----------------------------------

GIZMO test problem 중 Galactic disk (with cooling) 실행 (아직도 실행 중)
 - Timestep이 너무 작아서 실행시간이 너무 오래 걸림
 - 데스크탑으로 돌려놓고 내일 결과 확인 예정 (maximum cpu time에 걸릴 듯)
 - 다만 현재 다시 보니 ADAPTIVE_GRAV_FORGAS 때문일 수도 있겠다는 생각

bash script 기본적인 문법에 대한 공부

GIZMO user's guide 공부
 - section 7: Config.sh (Setting compile-time options) 
              Galaxy & Galactic Star Formation Options 부터
			  ~ Sink-Particle Dynamics (IMF, Star formation, Planets, Compact objects) 까지

노트북 언더볼팅 - 0.15mV 테스트까지 성공

---------------------------------2020. 02. 07----------------------------------

노트북 언더볼팅
 - 0.165mV 프리징 발견, 0.16mV 더 심도있게 테스트 필요
 - 우분투에서도 0.15mV 언더볼트, GalIC Model_H1 실행속도 약 10% 향상


GIZMO user's guide 공부
 - section 7: Config.sh (Setting compile-time options) 
              SuperMassive Black Hole Options 살짝 

------------------------2020. 02. 08 ~ 2020. 02. 09 주말-----------------------

Gizmo User's Guide 공부 
 - section 7: Config.sh (Setting compile-time options) 
              SuperMassive Black Hole Options ~ 마지막까지
 - section 8: The Paramterfile 
              Generic (Always-Required) Parameters 살짝

---------------------------------2020. 02. 10----------------------------------

Gizmo User's Guide 공부 
 - section 8: The parameterfile 전체
 - section 9: Snapshot & Initial Condition Files 전체
 - section 10: Log Outputs & Diagnostic Files 전체
 - section 12: Useful Additional Resources 전체
 - section 13: Frequently Asked Questions 전체
 - section 14: Disclaimer 전체라고 할 것도 없는 3줄

노트북 undervolting 부팅 시 작동 테스트, 성능 향상 테스트

---------------------------------2020. 02. 11----------------------------------

2월 4일에 만든 코드 개선
 - Halo, bulge star가 disk star에 의해 가려지는 현상 개선

PDF 리더 까느라 뭘 많이 하지 못했다...

---------------------------------2020. 02. 1215----------------------------------

논문공부
- Hopkins, P. F. 2015, A New Class of Accurate, Mesh-Free Hydrodynamic Simulation Methods
  (7페이지까지)

GalIc로 만들어진 은하 Sersic profile에 fitting하는 코드 작성
 -> particle을 어디까지 포함하느냐에 따라 Sersic index가 크게 달라짐
 -> Particle 갯수가 부족한 것 때문인지는 불확실 (아닐 가능성이 클 듯)
 -> log scale에서 best-fit 하느냐, 그냥 best-fit 하느냐도 불확실
    (일반 스케일에서는 Sersic index가 수렴, 그러나 R이 커질수록 차이가 커짐)
	(로그 스케일에서는 R이 커져도 추세선이 좋으나 Sersic index도 점점 커짐)

---------------------------------2020. 02. 13----------------------------------

논문공부
- Hopkins, P. F. 2015, A New Class of Accurate, Mesh-Free Hydrodynamic Simulation Methods
  -> 6페이지 Taylor 전개 수학적 엄밀성 조사
  -> Boundary를 제외한 부분에서는 이해됨
  -> Boundary에서는 Talyor expansion이 불가능한 것 같은데, 이는 어떻게 한 건지?

GalIc로 만들어진 은하 Sersic profile에 fitting하는 코드 개선
 - I_e를 effective radius에서의 밝기를 쓰도록 조정
 - 기존 코드는 너무 멀리 있는 particle 포함시 resolution이 떨어져 R_e 오차가 큼
  -> particle 갯수에 따라서 R의 grid point를 만들도록 설정 (adaptive in R)
 - 전체적인 fitting에서는 개선이 있었음
 - Sersic index의 fluctuation도 많이 줄음
  -> 그러나 여전히 멀리있는 particle을 포함하면 Sersic index 역시 증가

Hernquist profile을 따르는 은하의 Sersic index를 수학적으로 구하려고 시도
 - R->inf의 경우에서도 converge하지 않음, 즉 해석적으로 구하는 것은 불가
 - R domain의 확대에 따른 Sersic index의 증가는 어쩔 수 없는 현상인 듯

GIZMO makefile 및 Config.sh에 openMP 추가
 - Gizo User's Guide에 따르면 Hyper-threading에는 openMP가 필수

GalIC로 만든 은하를 GIZMO를 통해 evolution test


---------------------------------2020. 02. 14----------------------------------
서우영 박사님이 주신 parameter로 GalIC를 통해 은하 형성 후, GIZMO로 진화시킴
 - Spiral structure, Bar evolution등 확인
 - Fourier analysis로 azimuthal structure 분석 시도
  -> R에 따라서 variation이 너무 큼. 무언가 잘못된 듯

랩미팅 참가

서우영 박사님과 미팅
1.어떻게 gas particle을 추가할 것인가?
 - GalIC로 만든 은하에 scale height로 주어지는 PDF를 따라 Weighted Monte Carlo를 이용해 입자 추가
 - 이후 GIZMO를 통해 조금 진화시켜서 gas particle의 R에 따른 scale height 변화 확인
 - 변화가 거의 없을 시 relaxation이 되었다 보고 초기 은하로 사용
 - Scale height의 form을 아는 경우 Monte Carlo 방법으로 입자를 추가할 때 바로 사용 가능
  -> 이 경우 GIZMO를 통한 relaxation을 사용하지 않아도 됨 (테스트 용으로만)
 - Gas particle 추가는 서우영 박사님이 보내주신 코드 참고
   (Accretion disk 코드이므로, 적절하게 변형해주어야 함)
   (특히 GalIC에서 먼저 파일을 읽는 코드 필요)
2. Density contour plot할 때 linked list를 사용한 hash table이 나음

Weighted Monte Carlo method 연습

------------------------2020. 02. 15 ~ 2020. 02. 16 주말-----------------------
별 일 안했습니당

---------------------------------2020. 02. 17----------------------------------
Sprical and bar structure 분석을 위한 FFT 코드 수정
 - m=3를 비롯한 다른 mode의 크기가 크고, 시간에 따른 값도 stable 하지 않음
 - 은하 중심이 정확히 (0, 0)에 위치하지 않기 때문
 - 각 snapshot 별로 데이터를 읽을 때 이를 보정해주어야 함

서우영 박사님과 면담
 - Gas scale height가 작은 이유에 대한 논의 (어처피 조금 진화시키면 작아짐)
 - Particle에 internal energy 주는 방법 (sound speed와 연관성 추가 공부 필요)
 - Kernel function 설정 방법 및 코드
 - 은하 시뮬레이션 할 때 GIZMO flag 뭘 넣을 것인지
 - 기타 연구 진행에 필요한 팁들

Density contour plot하는 코드 user interface 추가 (ptype, size 고르기 등)

---------------------------------2020. 02. 18----------------------------------
analysis.py 수정
 - load_data에서 ptype을 고를 수 있게 수정
 - 각 분석 subroutine을 실행 시  size, axis, ptype 등을 선택할 수 있는 UI 추가
 - Coordinates, Velocities를 읽을 때 CM이 (0,0)에 오도록 수정

---------------------------------2020. 02. 19----------------------------------
add_gas.py 코딩하는 중
 - 현재 추가된 사항
  -> Gas particle을 PDF에 따라 randomly generate
  -> Gas particle의 위치에 따라 rotcurve를 interpolate한 속도 부여
  -> 기존 IC file 내용을 새 IC file에 복사

GalIC 코드 수정
 - Structural constant (특히 scale height)는 코드 실행 시 stdout으로 나옴
 - add_gas.py를 위해 structual constants 들을 파일로 출력하도록 수정
   (출력 파일: output directory에 structural_constants.txt)

---------------------------------2020. 02. 20----------------------------------
add_gas.py 코딩 완료
 - 추가 사항
  -> Gas Particle에 mass, ParticleID, InternalEnergy assign하는 코드 추가
  -> 새 IC file (hdf5 file) 작성
- 현재 add_gas.py를 이용해 gas particle을 추가한 IC 파일을 GIZMO로 테스트 중
  -> 실행은 잘 되는 것은 확인함
  -> Star formation 나타나는 것도 확인
- 앞으로 확인할 사항들
  -> InternalEnergy가 정말 physical하게 맞는 값인가?
  -> Metallicity 부분은 어떻게 처리해야하는가?
  -> 만든 HDF5 파일이 완벽한 양식으로 만들어진 것인가?
- 확인된 오류
  -> load_from_snapshot에 value='Keys'를 주었을 경우 Key를 반환하긴 하나 에러 발생
  -> HDF5 파일이 완벽한 양식으로 만들어지지 않아서 그런듯함
  -> 이 에러가 GIZMO 코드의 결과에도 영향을 줄 지는 미지수

서우영 박사님이 주신 컨디션으로 만든 GalIC 파일에 add_gas로  가스 추가 후 GIZMO로 진화시킴
 - Cooling을 준 것과 주지 않은 것 2가지

---------------------------------2020. 02. 21----------------------------------

진화시켰던 은하 분석
 - Star formation 등의 활동은 정상적으로 나타남
 - Cooling을 준 은하는 Bar가 거의 나타나지 않고, Cooling을 주지 않은 은하는 Bar가 나타남
 - 이는 CMC (Central Mass Concentration)으로 인한 듯
   -> Cooling을 준 은하는 gas particle이 강하게 galactic center로 모임
   -> Galactic Center에서 강한 star formation
   -> CMC 크게 증가 (density contour로 확인, cooling X 때보다 약 10배 가량  증가)
 - Cooling을 주지 않은 은하는 초기에만 star formation이 일어나고 이후로는 잠잠
   -> CMC도 거의 관찰되지 않음
   -> 온도가 낮아지지 않은 것에 의한 영향인 듯. 물리적으로 대략적으로 맞는 듯.

GIZMO로 gas particle을 equalibrium으로 만드는 루틴 정석화
 - GIZMO로 t=0.01까지만 진화시키고, snapshot은 0.001마다 제작
 - Config.sh에서는 HYDRO solver를 제외한 모든 physics off

GalIC로 Bar2, Bar3 은하 제작 (세부사항은 아래에)

테스트 케이스 20가지 인턴실 컴퓨터에 돌려놓음
 - 은하 종류 4가지 (Bar1, Bar2, Bar3, M4)
   -> Bar1: 서우영 박사님이 제시하신 컨디션
   -> Bar2: Bar1에 bulge 추가
   -> Bar3: Bar2에서 M4와 같이 velocity structure, stretch 등 변경
   -> M4: GalIc에서 예시로 주어진 M4 (with particle number = 100000, respectively)
 - Physics 종류 5가지
   1. OnlyGrav: 모든 physics를 끄고 중력만 킴
   2. Basic: 1 + COOLING,  METAL, GALSF
   3. CoolingLowT: 2 + COOL_LOW_TEMPERATURE
   4. SFR_Criteria: 2 + GALSF_SFR_MOLECULAR_CRITERION, GALSF_SFR_SF_CRITERION=0
   5. SFR_Criteria_Feedback: 4 + GALSF_EFFECTIVE_EQS, GALSF_SUBGRID_WINDS
 - Terminal 4개에 각각 bash script로 실행시켰으며, 주말 이후 결과 확인 예정
	
------------------------2020. 02. 22 ~ 2020. 02. 23 주말-----------------------

진화시킨 은하 추가 분석
 - CM correction code도 각 galactic component를 분리해서 하는 오류 발견
   -> 전체 은하의 CM을 구하도록 수정
 - 그러나 여전히  CM correction을 해도 은하 중심을 정확히 보정하지 못하는 것을 발견
 - Local density maximum, gravitation potential well 등의 대안을 고려해야 할 듯

은하내 위치에 따른 particle들의 hash table 코딩 시작

---------------------------------2020. 02. 24----------------------------------

add_gas.py에서 가스의 속도를 주는 데에 방향을 잘못주는 오류 발견
 - 이를 이용한 은하는 gas가 중심으로 모여들다가 산란되어 퍼져버림
 - 수정 후 속도 방향도 잘 주어지는 것을 확인
 - 따라서 2020. 02. 21에 돌린 은하는 모두 초기 조건이 잘못됨
 - 이를 이용한 은하 진화는 다시 시도 중

add_gas.py가 자동으로 GIZMO 진화를 통해 equalibrium이 도달된 IC file을 만들도록 수정

---------------------------------2020. 02. 25----------------------------------

"Galaxies in the Universe" 공부
 - Chap 1.1

천문학과에 확진자 밀접접촉자 발생, 오후 건물 폐쇄

폐쇄 전 다양한 GIZMO 모델 돌려놓음 (28개)
 - 초기 은하 4개는 이전과 동일
 - GIZMO physics 조건
  1~5: 2020. 02. 21과 동일
  6: 5 + ADAPTIVE_GRAV_FORGAS
  7: 5 + ADAPTIVE_GRAV_FORALL=3 (adaptive gravitation for gas, halo)

---------------------------------2020. 02. 26----------------------------------

재택근무

"Galaxies in the Universe" 공부
 - Chap 1.1

---------------------------------2020. 02. 27----------------------------------

천문학과 건물 폐쇄 해제로 출근했으나 감염 우려로 점심 먹고 퇴근

"Galaxies in the Universe" 공부
 - Chap 1.1~1.2

---------------------------------2020. 02. 28----------------------------------

감염 우려로 점심 먹고 출근

2020. 02. 25에 돌린 모델 확인
 - Model_Bar1의 경우 particle이 적어 잘 돌아감
 - 그러나 다른 모델은 MaxCPUTime에 걸려서 중간에 정지됨
 - 또한 몇몇 모델의 경우 star formation이 너무 작았음 (SFR criteria 건든 경우)
 - CoolingLowT의 효과를 정확히 알아보기 위해 모델 16개 추가 (특히 Star formation)
  8. 4 + COOL_LOW_TEMPERATURES
  9. 5 + COOL_LOW_TEMPERATURES
  10. 6 + COOL_LOW_TEMPERATURES
  11. 7 + COOL_LOW_TEMPERATURES
	
------------------------2020. 02. 29 ~ 2020. 03. 01 주말-----------------------

analysis_hashtable.py 코딩:
 - particle data를 위치에 따른 hash table로 저장해서 분석
 - analysis.py의 plot_particles와 plot_density_contour 두 분석 기능 구현
 - analysis.py와 비교
  - 장점 : 특정 ID를 가진 particle 추척 가능
  - 단점 : 메모리와 속도 효율성이 크게 떨어짐
  - 차이점 : project하는 축 방향으로도 size 내의 particle만 고려

-------------------------2020. 03. 02 ~ 2020. 03. 06---------------------------

Density contour 구할 때 kernel function 활용하는 코드 제작
 - Gaussian kernel 활용
 - Silverman's rule을 따라 각 ptype, axis 별로 stddev를 이용한 bandwidth
 - 질량이 매우 크나 희박하게 분포한 Halo particle에도 잘 먹힘
 - 다만 halo particle의 경우 kernel length가 너무 커서 3D grid의 경우 메모리에러 발생
 - 추후 cubic spline kernel로 바꿀 예정 - 관련 문서 찾는 중

------------------------2020. 03. 07 ~ 2020. 03. 08 주말-----------------------

"Galaxie in the Universe" 공부
 - Chap 2.1~2.2

---------------------------------2020. 03. 09----------------------------------

2020. 02. 25, 2020. 02. 28에 돌린 모델 간단하게 확인
 - Model Bar1에서만 bar가 형성되고 나머지는 bar 형성이 안됨
  -> Bulge existence가 bar formationd에 큰 영향을 미치는 듯
  -> 초반 spiral structure는 모든 은하에서 관찰됨
 - Feedback (GALSF_EFFECTIVE_EQS, GALSF_SUBGRID_WINDS) 넣은 모델은 SF가 매우 낮음
  -> 다른 physics 유무와 관계없이 SFR이 극도로 낮음 (거의 0에 근점)
  -> 약 0.5Gyr이 지나서야 매우 낮은 SFR (order of 0.1 M_sun/yr)
  -> GADGET-2/3, APERO 등의 default라는데, 이러한 행동이 맞는지는 더 검증 필요
 - COOL_LOW_TEMPERATURES는 SFR을 특히 초반에 급격하게 증가시킴
  -> 최종적으로 ptype4의 갯수는 초기 ptype0이 약 80% 정도가 됨
  -> 반면 이 flag가 없는 경우 약 60%
  -> 어느 정도는 예상된 바
 - GALSF_SFR_MOLECULAR_CRIETRION, GALSF_SFR_VIRIAL_SF_CRITERION=0는 큰 효과 없었음
  -> 다만 가장 처음에 SFR을 0으로 만들어줌
  -> 그 이후에는 다른 모델과 차이가 없었고, 최종적인 결과는 비슷함
 - ADAPTIVE_GRAV_FORGAS, ADAPTIVE_GRAV_FORALL=3의 효과는 판단 불가
  -> Star formation은 feedback으로 인해 거의 0
  -> 외형적인 bar evolution은 다른 모델과는 큰 차이가 없었음
  -> Feedback을 넣지 않은 모델을 대조군으로 새로 돌려야 할 듯

2020. 02. 25, 2020. 02. 28의 모델과 더불어, 각 은하 별로 새로운 모델 4개 추가
 12. 4 + ADAPTIVE_GRAV_FORGAS
 13. 12 + COOL_LOW_TEMPERATURES
 14. 4 + ADAPTIVE_GRAV_FORALL=3
 15. 14 + COOL_LOW_TEMPERATURES
 (Adaptive gravitation model에서 feedback이 없는 모델들)

Bash shell scripting 개선 후 총 60개 모델 돌리기 시작 - 일주일 걸릴 듯?

---------------------------------2020. 03. 10----------------------------------

TreePM algorithm 복습
 - Bagla, J. S., 1999: 전체

SPH 방법 공부
 - Dutto, P., 2014: section 5-1 ~ 5-4 읽음

plot_density_contour에 Gaussian kernel 대신 cubic spline kernel 적용
 - 다만 속도 향상 기법은 조금 더 연구해야 할 듯
 - numpy를 이용해서 속도 향상을 꾀했으나, 잘 되지 않음

---------------------------------2020. 03. 11----------------------------------

plot_density_contour 속도 향상
 - numpy 모듈을 최대한 활용
  -> ex) matrix 각 element 별로 연산을 하는 것을 순서를 바꿔 matrix 전체에 연산하도록 함
 - particle을 먼저 mesh에 assign 한 후 kernel을 적용할 수 있는 옵션 추가
  -> 기존 코드에 비해 항상 빠른 것은 아님
  -> Average particle number per grid가 커질수록 효과적
  -> 약 0.6 이상의 경우 기존 코드보다 빠른 것을 확인
 - 어제 만든 numpy를 최대한 이용해 cubic spline kernel을 만드는 코드도 효과가 있는 것을 확인
  -> Halo particle을 제외하고는  kernel matrix가 작음
  -> 따라서 시간이 걸리는 요인은 각 particle을 density matrix에 더해줄 때
  -> 그러나 kernel matrix가 매우 큰 halo particle 경우는 상당히 효과적
  -> grid_num이 커져 kernel matrix가 커질수록 더더욱 효과적

sesic_fitting 함수 개선 사항 발견
 1. 현재는 각 ptype 별로 Sersic fitting을 함
  -> 그러나 빛을 내지 않는 ptype0, ptype5에 대해서는 필요 없음
  -> 또한 disk는 ptype2 + ptype4 이므로 합해줘서 Sersic fitting 필요
 2. ptype 별로 mass가 다른 것을 고려해야함 (L/M=일정 가정)
 - 그러나 개선을 위해서는 함수 알고리즘 전체를 수정해야함
 - 오늘은 시간이 부족해서 하지 않았으나, 추후 수정 예정
 
---------------------------------2020. 03. 12----------------------------------

plot_density_contour 속도 향상
 - Kernel matrix construction 속도 더욱 향상
  -> Kernel matrix가 origin에 대해 symmetric한 점을 이용
  -> 한쪽 사분면만 만든 뒤 나머지는 flip후 붙이기 적용
  -> 또한 (ndarray)**3 연산이 오래 걸림을 발견
  -> 이미 계산된 값을 이용하도록 변경하여, 위 연산 횟수를 2번에서 1번으로 줄임
 - 수정 이전 초기 코드와 비교했을 때 엄청난 속도 향상을 확인
  -> Halo partice의 경우 grid_num이 수십개 이상일 때 grid_num*0.25배 빠름
  -> 이외 particle은 약 2.5배 정도 빠름

plot_density_contour 오류 해결
 - 이전 코드는 목표 크기 밖의 particle은 전혀 고려하지 않음
 - 그러나 이 particle도 kernel function을 통해 목표 지점에 영향을 줄 수 있음
 - data에 영향을 줄 수 있는 particle도 포함하도록 변경
